import de.reiss.bible2net.theword.ApkSignatureLoader

apply plugin: "com.android.application"
apply plugin: 'io.fabric'
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-android-extensions"

android {

    compileSdkVersion sdk.compile
    buildToolsVersion versions.build_tools

    defaultConfig {
        applicationId "de.reiss.bible2net.theword"

        minSdkVersion sdk.min

        targetSdkVersion sdk.target

        versionCode isIdeBuild ? 1 : app_version_code
        versionName app_version_name

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "de.reiss.bible2net.theword.testutil.AppTestRunner"
    }

    signingConfigs {
        release {
            def propertiesFile = new File('apk_signature.properties')
            def apkSignatureLoader = new ApkSignatureLoader()
            def apkSignature = apkSignatureLoader.loadApkSignature(propertiesFile)
            if (apkSignature != null) {
                storeFile = apkSignature.storeFile
                storePassword = apkSignature.storePassword
                keyAlias = apkSignature.keyAlias
                keyPassword = apkSignature.keyPassword
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            ext.enableCrashlytics = false
        }
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

}

dependencies {
    implement libraries.kotlin.lib

    implement project(":database")
    implement project(":logger")
    implement project(":downloader")
    implement project(":twdparser")
    implement project(":events")

    implement libraries.support.app_compat
    implement libraries.support.design
    implement libraries.support.recycler_view
    implement libraries.support.card_view

    implement libraries.preference_fix.core
    implement libraries.preference_fix.extras

    implement libraries.arch.runtime
    implement libraries.arch.extensions
    kapt libraries.arch.compiler

    implement libraries.play_services.gcm

    implement libraries.dagger.core
    kapt libraries.dagger.compiler
    provided libraries.dagger.glassfish

    implement(libraries.crashlytics) {
        transitive = true
    }

    testImplement libraries.junit
    testImplement libraries.mockito_kotlin
    testImplement libraries.arch.core_testing

    androidTestImplement libraries.support.test_runner
    androidTestImplement libraries.support.test_rules
    androidTestImplement libraries.espresso.core
    androidTestImplement libraries.espresso.contrib
    androidTestImplement libraries.espresso.intents
    androidTestImplement libraries.mockito_android
    androidTestImplement libraries.mockito_kotlin

}